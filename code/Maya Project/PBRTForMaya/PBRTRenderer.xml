<?xml version="1.0"?>
<!DOCTYPE renderer SYSTEM "renderer.dtd">
<!--
  Top level tag, mandatory:
    <renderer>: "desc" gives a one line description.

  Header tags, not mandatory, must be specified only once.
    <melheader>: "s" is a mel script executed just after the file is read
    <meltrailer>: "s" is a mel script executed after all flags are converted
        to mel. Should contain at least the rendering command.

  Other tags:
    <sep>: "desc" produces a line in the help. Blank if desc is missing.
    <attr>: produces a setAttr line.
        "n" is the flag name.
        "s" the attribute name.
        "t" the parameter type, used in help description.
        "h" the help description.
    <attrString>: produces a setAttr line for a string attribute.
        Same parameters as <attr>, but for string attributes.
    <mel>: Calls a mel script.
        "n" is the flag name.
        "p" the number of parameters.
        "s" the string defining the action %1 ... %p are replaced with values
                read after the flag.
        "t" the parameter types, used in help description.
        "h" the help description.
-->
<renderer desc="PBRT renderer">
    <melheader s='string $opt=""; string $rl=""; string $rp=""; float $resize=-1.; loadPlugin -quiet PBRTForMaya;'/>
    <meltrailer s='setMayaSoftwareLayers($rl, $rp); setImageSizePercent($resize);mayaBatchRenderProcedure(0, "", "", "PBRT", $opt); '/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc="General purpose flags:"/>
    <mel n="rd" p="1" s='workspace -fr "depth" "%1";workspace -fr "images" "%1";' t="path" h="Directory in which to store image files"/>
    <attrString n="im" s="defaultRenderGlobals.imageFilePrefix" t="filename" h="Image file output name"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc="Frame numbering options"/>
    <mel n="s" p="1" t="float" s="removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.animation; setAttr defaultRenderGlobals.animation 1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.startFrame; setAttr defaultRenderGlobals.startFrame %1" h="Starting frame for an animation sequence"/>
    <mel n="e" p="1" t="float" s="removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.animation; setAttr defaultRenderGlobals.animation 1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.endFrame; setAttr defaultRenderGlobals.endFrame %1" h="End frame for an animation sequence"/>
    <attr n="b" s="defaultRenderGlobals.byFrameStep" t="float" h="By frame (or step) for an animation sequence"/>
    <attr n="pad" s="defaultRenderGlobals.extensionPadding" t="int" h="Number of digits in the output image frame file name\n\t\t    extension"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc="Render Layers and Passes"/>
    <mel n="rl" s='$rl="%1"' p="1" t="boolean|name(s)" h="Render each render layer separately"/>
    <mel n="rp" s='$rp="%1"' p="1" t="boolean|name(s)" h="Render passes separately. 'all' will render all passes"/>
    <mel n="sel" p="1" s="select -add %1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.renderAll; setAttr defaultRenderGlobals.renderAll 0" t="boolean|name(s)" h="Selects which objects, groups and/or sets to render"/>
    <mel n="l" p="1" s="selectLayerMembers %1; removeRenderLayerAdjustmentAndUnlock defaultRenderGlobals.renderAll; setAttr defaultRenderGlobals.renderAll 0" t="boolean|name(s)" h="Selects which display and render layers to render"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc="Camera options"/>
    <mel n="cam" s='makeCameraRenderable("%1")' p="1" t="name" h="Specify which camera to be rendered"/>
    <mel n="rgb" s='applyOnCameras("image", "%1")' p="1" t="boolean" h="Turn RGB output on or off"/>
    <mel n="alpha" s='applyOnCameras("mask", "%1")' p="1" t="boolean" h="Turn Alpha output on or off"/>
    <mel n="depth" s='applyOnCameras("depth", "%1")' p="1" t="boolean" h="Turn Depth output on or off"/>
    <mel n="iip" s="disableImagePlanes" p="0" t="" h="Ignore Image Planes. Turn off all image planes before\n\t\t    rendering"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc="Resolution options"/>
    <attr n="x" s="defaultResolution.width" t="int" h="Set X resolution of the final image"/>
    <attr n="y" s="defaultResolution.height" t="int" h="Set Y resolution of the final image"/>
    <mel n="percentRes" s="$resize=%1" p="1" t="float" h="Renders the image using percent of the resolution"/>
    <attr n="ard" s="defaultResolution.deviceAspectRatio" t="float" h="Device aspect ratio for the rendered image"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <!-- Generic options above -->
    <!-- ______________________________________________________________ -->
    <sep desc="Path options"/>
    <attrString n="mfm:mp" s="defaultPBRTRenderGlobals.pbrtPath" t="string" h="PBRT path."/>
    <attr n="mfm:smps" s="defaultPBRTRenderGlobals.samplerPixelSamples" t="int" h="Set sample count for the image sampler"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <!-- Generic options below -->
    <!-- ______________________________________________________________ -->
    <sep desc="Mel callbacks"/>
    <mel n="preRender"  p="1" s='string $pm=`getAttr defaultRenderGlobals.preMel`;             setAttr -type "string" defaultRenderGlobals.preMel             ($pm + ";%1");' t="string" h="add Mel code executed before rendering"/>
    <mel n="postRender" p="1" s='string $pm=`getAttr defaultRenderGlobals.postMel`;            setAttr -type "string" defaultRenderGlobals.postMel            ($pm + ";%1");' t="string" h="add Mel code executed after rendering"/>
    <mel n="preLayer"   p="1" s='string $pm=`getAttr defaultRenderGlobals.preRenderLayerMel`;  setAttr -type "string" defaultRenderGlobals.preRenderLayerMel  ($pm + ";%1");' t="string" h="add Mel code executed before each render layer"/>
    <mel n="postLayer"  p="1" s='string $pm=`getAttr defaultRenderGlobals.postRenderLayerMel`; setAttr -type "string" defaultRenderGlobals.postRenderLayerMel ($pm + ";%1");' t="string" h="add Mel code executed after each render layer"/>
    <mel n="preFrame"   p="1" s='string $pm=`getAttr defaultRenderGlobals.preRenderMel`;       setAttr -type "string" defaultRenderGlobals.preRenderMel       ($pm + ";%1");' t="string" h="add Mel code executed before each frame"/>
    <mel n="postFrame"  p="1" s='string $pm=`getAttr defaultRenderGlobals.postRenderMel`;      setAttr -type "string" defaultRenderGlobals.postRenderMel      ($pm + ";%1");' t="string" h="add Mel code executed after each frame"/>

    <mel n="insertPreRender"  p="1" s='string $pm=`getAttr defaultRenderGlobals.preMel`;             setAttr -type "string" defaultRenderGlobals.preMel             ("%1;" + $pm);' t="string" h="insert Mel code executed before rendering"/>
    <mel n="insertPostRender" p="1" s='string $pm=`getAttr defaultRenderGlobals.postMel`;            setAttr -type "string" defaultRenderGlobals.postMel            ("%1;" + $pm);' t="string" h="insert Mel code executed after rendering"/>
    <mel n="insertPreLayer"   p="1" s='string $pm=`getAttr defaultRenderGlobals.preRenderLayerMel`;  setAttr -type "string" defaultRenderGlobals.preRenderLayerMel  ("%1;" + $pm);' t="string" h="insert Mel code executed before each render layer"/>
    <mel n="insertPostLayer"  p="1" s='string $pm=`getAttr defaultRenderGlobals.postRenderLayerMel`; setAttr -type "string" defaultRenderGlobals.postRenderLayerMel ("%1;" + $pm);' t="string" h="insert Mel code executed after each render layer"/>
    <mel n="insertPreFrame"   p="1" s='string $pm=`getAttr defaultRenderGlobals.preRenderMel`;       setAttr -type "string" defaultRenderGlobals.preRenderMel       ("%1;" + $pm);' t="string" h="insert Mel code executed before each frame"/>
    <mel n="insertPostFrame"  p="1" s='string $pm=`getAttr defaultRenderGlobals.postRenderMel`;      setAttr -type "string" defaultRenderGlobals.postRenderMel      ("%1;" + $pm);' t="string" h="insert Mel code executed after each frame"/>
    <sep/>
    <!-- ______________________________________________________________ -->
    <sep desc=" *** Remember to place a space between option flags and their arguments. ***"/>
    <sep desc="Any boolean flag will take the following values as TRUE: on, yes, true, or 1."/>
    <sep desc="Any boolean flag will take the following values as FALSE: off, no, false, or 0."/>
    <sep/>
    <sep desc="    e.g. -s 1 -e 10 -x 512 -y 512 -cam persp -as 4 -hs 2 -dif 2 file."/>
</renderer>
